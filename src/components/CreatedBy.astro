---

---

<div class="container">

    <span>This page was crafted 

<!-- <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
	<path fill="red" d="m12 21.35l-1.45-1.32C5.4 15.36 2 12.27 2 8.5C2 5.41 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.08C13.09 3.81 14.76 3 16.5 3C19.58 3 22 5.41 22 8.5c0 3.77-3.4 6.86-8.55 11.53z" />
</svg> -->

by
</span>
<a href="https://www.linkedin.com/in/renato-lourinho/">
  
  <svg class="autograph" version="1.1" viewBox="0 0 3425.0286 1796.4523" xmlns="http://www.w3.org/2000/svg">
      <g id="layer1" transform="translate(-363.91751,-1874.35)">
        <path id="path" class="autograph-path" style="fill:none;stroke:#000000;stroke-width:50;stroke-linecap:round;" d="m 1112.1338,1992.8236 c -7.5144,82.1577 -15.0288,164.3152 -25.7995,245.9719 -10.7706,81.6567 -24.7976,162.8125 -39.3256,241.7146 -14.5281,78.9022 -29.5562,155.546 -49.09413,228.1869 -19.53789,72.6409 -43.58352,141.2712 -69.3833,211.156 -25.79977,69.8848 -53.35207,141.0198 -84.16154,203.6405 -30.80946,62.6207 -64.87413,116.7234 -104.20004,164.3151 -39.3259,47.5918 -83.91056,88.6698 -125.74119,114.2189 -41.83064,25.5491 -80.90482,35.5682 -113.21707,30.3079 -32.31225,-5.2603 -57.86075,-25.7993 -78.14984,-62.871 -20.2891,-37.0717 -35.31762,-90.6734 -45.08641,-150.539 -9.7688,-59.8655 -14.27736,-125.991 -12.7744,-212.4079 1.50296,-86.4169 9.01723,-193.1195 20.78997,-281.2893 11.77275,-88.1699 27.80319,-157.8021 59.11373,-229.1898 31.31054,-71.3877 77.89902,-144.5266 131.00149,-207.1472 53.10247,-62.6207 112.71569,-114.7197 171.07823,-158.5541 58.36254,-43.8345 115.47094,-79.402 180.59663,-113.4677 65.12569,-34.0657 138.26457,-66.6275 201.38617,-89.9224 63.1217,-23.2948 116.2225,-37.3214 170.0764,-45.0863 53.8539,-7.7649 108.4575,-9.2678 160.3075,-0.7513 51.85,8.5166 100.9432,27.0517 142.2728,54.3545 41.3297,27.3027 74.8934,63.3712 99.4407,101.4446 24.5472,38.0735 40.0767,78.1496 47.3406,121.4832 7.2639,43.3336 6.262,89.9221 -1.2525,133.5062 -7.5146,43.584 -21.5412,84.161 -41.0789,122.2344 -19.5378,38.0734 -44.5853,73.641 -76.8977,109.2095 -32.3124,35.5686 -71.8876,71.1362 -106.9552,99.1902 -35.0676,28.054 -65.6256,48.593 -100.6933,67.1287 -35.0676,18.5358 -74.6428,35.0672 -115.9725,45.0864 -41.3297,10.0193 -84.4115,13.526 -129.749,12.2735 -45.3375,-1.2525 -92.9278,-7.2639 -143.5254,-18.2852 -50.59765,-11.0213 -104.19941,-27.0517 -157.80227,-43.0825 0,0 157.80277,61.6183 157.80277,61.6183 53.6028,18.5355 107.2057,37.0711 152.2922,53.3523 45.0865,16.2812 81.6559,30.3079 120.4812,45.0866 38.8253,14.7786 79.9025,30.3078 119.2287,45.3369 39.3262,15.0291 76.8968,29.5564 113.9687,44.0846 37.0719,14.5282 73.6406,29.0554 118.728,45.0865 45.0874,16.0311 98.688,33.564 146.7813,46.3388 48.0932,12.7747 90.6732,20.7898 134.7587,25.2985 44.0855,4.5088 89.672,5.5107 136.2619,4.2582 46.5899,-1.2524 94.1802,-4.7591 132.003,-13.025 37.8229,-8.266 65.8762,-21.2907 92.1769,-39.0751 26.3007,-17.7843 50.8473,-40.3271 73.3907,-67.3794 22.5435,-27.0522 43.0825,-58.6121 60.6163,-93.1788 17.5338,-34.5667 32.0614,-72.138 45.337,-111.4639 13.2756,-39.3259 25.2984,-80.4039 34.3158,-116.4734 9.0174,-36.0695 15.0288,-67.1285 21.5413,-103.4486 6.5126,-36.3201 13.5259,-77.899 19.287,-118.9783 5.7611,-41.0792 10.2696,-81.6562 14.0269,-120.481 3.7572,-38.8249 6.7629,-75.8953 9.7687,-118.4775 3.0058,-42.5822 6.0115,-90.6735 6.763,-128.2458 0.7514,-37.5724 -0.7515,-64.6238 -5.2602,-82.1575 -4.5088,-17.5337 -12.0231,-25.5489 -19.5375,-33.5643 0,0 -24.046,15.0288 -24.046,15.0288 -12.5241,26.5509 -25.0479,53.1014 -36.0693,83.1596 -11.0213,30.0583 -20.5392,63.6214 -28.8052,93.9302 -8.266,30.3087 -15.2792,57.3595 -23.2947,86.1654 -8.0156,28.8058 -17.0325,59.3632 -23.5451,85.9146 -6.5127,26.5515 -10.5202,49.0939 -16.5319,75.8958 -6.0116,26.802 -14.0267,57.8604 -22.0422,88.9206 -8.0155,31.0602 -16.0306,62.1185 -23.7956,92.9283 -7.7651,30.8097 -15.2792,61.367 -21.5414,90.6739 -6.2621,29.3069 -11.2715,57.3595 -17.5336,90.6741 -6.2622,33.3146 -13.7763,71.8871 -21.2909,105.4521 -7.5145,33.5651 -15.0288,62.1194 -23.0443,91.9269 -8.0154,29.8075 -16.5316,60.8664 -25.2986,92.6778 -8.7669,31.8114 -17.784,64.3732 -26.8014,94.6816 -9.0174,30.3085 -18.0345,58.3617 -27.8033,89.6722 -9.7689,31.3104 -20.2888,65.876 -31.0596,97.4368 -10.7708,31.5609 -21.7917,60.1151 -34.8169,90.9245 -13.0251,30.8095 -28.0537,63.8723 -42.3312,93.4292 -14.2775,29.557 -27.8032,55.6065 -39.8264,78.4004 -12.0231,22.7939 -22.5431,42.331 -39.3255,62.1191 -16.7824,19.7882 -39.8262,39.8263 -62.8704,59.8647 0,0 123.2364,-105.2018 123.2364,-105.2018 27.5529,-15.0288 55.1058,-30.0577 80.4046,-42.3313 25.2987,-12.2737 48.3425,-21.7917 75.3947,-29.5567 27.0522,-7.765 58.1112,-13.7764 87.9187,-18.5355 29.8074,-4.7592 58.3616,-8.2659 87.4177,-11.2717 29.056,-3.0058 58.6121,-5.5105 93.4293,-6.5124 34.8172,-1.0019 74.8933,-0.501 107.7065,0.501 32.8133,1.0019 58.3618,2.5047 94.4314,4.2581 36.0697,1.7534 82.6582,3.7572 124.2383,5.2601 41.5802,1.5029 78.1496,2.5048 116.724,4.2582 38.5744,1.7533 79.1515,4.2581 121.9841,7.5144 42.8326,3.2563 87.9182,7.2639 132.2537,12.0231 44.3355,4.7592 87.9183,10.2696 129.248,14.2773 41.3297,4.0078 80.4039,6.5125 121.7336,6.763 41.3297,0.2504 84.9125,-1.7534 123.2363,-4.5087 38.3239,-2.7553 71.3867,-6.262 107.4563,-11.5221 36.0696,-5.2602 75.1438,-12.2735 114.2187,-19.2869" id="path3"/>
      </g>
    </svg>
</a>

</div>

<script is:inline>
const draw = (totalDur, selector) => {
  // unset 'animated' class to body which will reset the animation
  document.body.classList.add('animated')

  // get all SVG elements - lines and dots
  const paths = document.querySelectorAll(selector)

  // prepare path length variable
  let len = 0

  // prepare animation delay length variable
  let delay = 0

  // escape if no elements found
  if (!paths.length) {
    return false
  }

  // set duration in seconds of animation to default if not set
  const totalDuration = totalDur || 5

  // calculate the full path length
  paths.forEach((path) => {
    const eachLen = path.getTotalLength()
    len += eachLen
  })

  paths.forEach((path) => {
    const pathElem = path

    // get current path length
    const totalLen = path.getTotalLength()

    // calculate current animation duration
    const duration = totalLen / len * totalDuration

    // set animation duration and delay
    pathElem.style.animationDuration = `${duration < 0.2 ? 0.2 : duration}s`
    pathElem.style.animationDelay = `${delay}s`

    // set dash array and offset to path length - this is how you hide the line
    pathElem.setAttribute('stroke-dasharray', totalLen)
    pathElem.setAttribute('stroke-dashoffset', totalLen)

    // set delay for the next path - added .2 seconds to make it more realistic
    delay += duration + 0.2
  })

  // set 'animated' class to body which will start the animation
  document.body.classList.add('animated')
  
  return true;  
}
draw(5, 'path.autograph-path')
</script>

<style>

    .container{
    
        display:flex;
    }

    span {
        display: flex;
        align-items: center;
        font-family: sans-serif;
        font-size: 0.75rem;
    }

    .autograph {
        display: flex;
        align-items: center;
        max-width:100%;
        max-height: 100%;
        width: 50px;
        margin-left: 0.75rem;
    }

    .autograph-path {
        opacity: 0;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
        animation-direction: alternate;
        animation-iteration-count: infinite;

        .animated & {
            opacity: 1;
            animation-name: line;
        }
    }


    @keyframes line {
      20% {
        stroke-dashoffset: 0;
      }
      100% {
        stroke-dashoffset: 0;
      }
    }



</style>